class TestCase::Regex {
  use Regex;
  use Regex::ReplaceInfo;
  
  static method compile : int () {
    my $re = Regex->new("abc");
    
    return 1;
  }

  static method replace_g : int () {
    # Replace all
    {
      my $re = Regex->new("abc");
      my $target = "ppzabczabcz";
      my $offset = 0;
      my $length = -1;
      my $replace_info_ref = new Regex::ReplaceInfo[1];
      my $result = $re->replace_common($target, "ABC", \$offset, $length, {global => 1, info => $replace_info_ref});
      
      unless ($replace_info_ref->[0]->replaced_count == 2) {
        return 0;
      }
      
      unless ($result eq "ppzABCzABCz") {
        return 0;
      }
    }

    # Replace all offset
    {
      my $re = Regex->new("abc");
      my $target = "ppzabczabczabcz";
      my $offset = 6;
      my $length = -1;
      my $replace_info_ref = new Regex::ReplaceInfo[1];
      my $result = $re->replace_common($target, "ABC", \$offset, $length, {global => 1, info => $replace_info_ref});
      
      unless ($replace_info_ref->[0]->replaced_count == 2) {
        return 0;
      }
      
      unless ($result eq "ppzabczABCzABCz") {
        return 0;
      }
    }

    # Replace all with number
    {
      my $re = Regex->new("a\d+b");
      my $target = "za123bz";
      my $offset = 0;
      my $length = -1;
      my $replace_info_ref = new Regex::ReplaceInfo[1];
      my $result = $re->replace_common($target, "ABC", \$offset, $length, {global => 1, info => $replace_info_ref});
      
      unless ($replace_info_ref->[0]->replaced_count == 1) {
        return 0;
      }
      
      unless ($result eq "zABCz") {
        return 0;
      }
    }

    # Replace all - Not replace_g
    {
      my $re = Regex->new("a\d+b");
      my $target = "pppp";
      my $offset = 0;
      my $length = -1;
      my $replace_info_ref = new Regex::ReplaceInfo[1];
      my $result = $re->replace_common($target, "ABC", \$offset, $length, {global => 1, info => $replace_info_ref});
      
      unless ($replace_info_ref->[0]->replaced_count == 0) {
        return 0;
      }
      
      unless ($result eq "pppp") {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method replace : int () {
    # Replace
    {
      my $re = Regex->new("abc");
      my $target = "ppzabcz";
      my $offset = 0;
      my $replace_info_ref = new Regex::ReplaceInfo[1];
      my $result = $re->replace_common($target, "ABC", \$offset, -1, {info => $replace_info_ref});
      
      unless ($replace_info_ref->[0]->replaced_count == 1) {
        return 0;
      }
      
      unless ($result eq "ppzABCz") {
        return 0;
      }
    }

    # Replace offset
    {
      my $re = Regex->new("abc");
      my $target = "ppzabczabczabcz";
      my $offset = 6;
      my $replace_info_ref = new Regex::ReplaceInfo[1];
      my $result = $re->replace_common($target, "ABC", \$offset, -1, {info => $replace_info_ref});
      
      unless ($replace_info_ref->[0]->replaced_count == 1) {
        return 0;
      }
      
      unless ($result eq "ppzabczABCzabcz") {
        return 0;
      }
    }

    # Replace with number
    {
      my $re = Regex->new("a\d+b");
      my $target = "za123bz";
      my $offset = 0;
      my $replace_info_ref = new Regex::ReplaceInfo[1];
      my $result = $re->replace_common($target, "ABC", \$offset, -1, {info => $replace_info_ref});
      
      unless ($replace_info_ref->[0]->replaced_count == 1) {
        return 0;
      }
      
      unless ($result eq "zABCz") {
        return 0;
      }
    }

    # Replace - Not replaced
    {
      my $re = Regex->new("a\d+b");
      my $target = "pppp";
      my $offset = 0;
      my $replace_info_ref = new Regex::ReplaceInfo[1];
      my $result = $re->replace_common($target, "ABC", \$offset, -1, {info => $replace_info_ref});
      
      unless ($replace_info_ref->[0]->replaced_count == 0) {
        return 0;
      }
      
      unless ($result eq "pppp") {
        return 0;
      }
    }

    return 1;
  }

  static method replace_cb : int () {
    # Replace callback with capture
    {
      my $re = Regex->new("a(bc)");
      my $target = "ppzabcz";
      my $offset = 0;
      my $replace_info_ref = new Regex::ReplaceInfo[1];
      my $result = $re->replace_common($target, method : string ($re : Regex, $match : Regex::Match) {
        return "AB" . $match->captures(1) . "C";
      }, \$offset, -1, {info => $replace_info_ref});
      
      unless ($replace_info_ref->[0]->replaced_count == 1) {
        return 0;
      }
      
      unless ($result eq "ppzABbcCz") {
        return 0;
      }
    }
    return 1;
  }
  
  static method match_start_and_end : int () {
    # Match start and end
    {
      my $re = Regex->new("abc");
      my $target = "ppzabcz";
      my $match = $re->match($target);
      
      unless ($match) {
        return 0;
      }
      
      unless ($match->match_start == 3) {
        return 0;
      }
      unless ($match->match_length == 3) {
        return 0;
      }
    }

    # Match start UTF-8
    {
      my $re = Regex->new("あい[かきくけこ]+う");
      my $target = "んんあいかくこうん";
      my $match = $re->match($target);
      
      unless ($match) {
        return 0;
      }
      
      unless ($match->match_start == 6) {
        return 0;
      }
      unless ($match->match_length == 18) {
        return 0;
      }
    }

    # Match start zero width
    {
      my $re = Regex->new("b*c");
      my $target = "zzcz";
      my $match = $re->match($target);
      
      unless ($match) {
        return 0;
      }
      
      unless ($match->match_start == 2) {
        return 0;
      }
      unless ($match->match_length == 1) {
        return 0;
      }
    }


    # Match start zero width only
    {
      my $re = Regex->new("b*");
      my $target = "zzcz";
      my $match = $re->match($target);
      
      unless ($match) {
        return 0;
      }
      
      unless ($match->match_start == 0) {
        return 0;
      }
      unless ($match->match_length == 0) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method match_capture : int ()  {
    # Capture zero more only
    {
      my $re = Regex->new("(a*)");
      my $target = "aaa";
      my $match = $re->match($target);
      unless ($match->captures(1) eq "aaa") {
        return 0;
      }
    }
    
    # Capture a char
    {
      my $re = Regex->new("a(b)c");
      my $target = "zabcz";
      my $match = $re->match($target);
      
      unless ($match) {
        return 0;
      }
      
      unless ($match->captures(1) eq "b") {
        return 0;
      }
    }

    # Capture a char UTF-8
    {
      my $re = Regex->new("あ(い)う");
      my $target = "んあいうん";
      my $match = $re->match($target);
      
      unless ($match) {
        return 0;
      }
      
      unless ($match->captures(1) eq "い") {
        return 0;
      }
    }

    # Capture a char zero width
    {
      my $re = Regex->new("a(b?)c");
      my $target = "zacz";
      my $match = $re->match($target);
      
      unless ($match) {
        return 0;
      }
      
      unless ($match->captures(1) eq "") {
        return 0;
      }
    }

    # Capture char class-and quantifier
    {
      my $re = Regex->new("\-(\w+)\-");
      my $target = "-abc89-";
      my $match = $re->match($target);
      
      unless ($match) {
        return 0;
      }

      
      unless ($match->captures(1) eq "abc89") {
        return 0;
      }
    }

    # Capture many strings 
    {
      my $re = Regex->new("\-(\w+) (\w+) (\w+) (\w+) (\w+)");
      my $target = "-abc1 abc2 abc3 abc4 abc5 abc6-";
      my $match = $re->match($target);
      
      unless ($match) {
        return 0;
      }
      
      unless ($match->captures(1) eq "abc1") {
        return 0;
      }

      unless ($match->captures(2) eq "abc2") {
        return 0;
      }

      unless ($match->captures(3) eq "abc3") {
        return 0;
      }

      unless ($match->captures(4) eq "abc4") {
        return 0;
      }

      unless ($match->captures(5) eq "abc5") {
        return 0;
      }
    }

    # Capture error
    {
      eval { Regex->new(")abc"); };
      unless ($@) {
        return 0;
      }
      eval { Regex->new("((abc)"); };
      unless ($@) {
        return 0;
      }
      
      $@ = undef;
    }
    
    # Capture zero more only
    {
      my $re = Regex->new("(a*)");
      my $target = "aaa";
      my $match = $re->match($target);
      unless ($match->captures(1) eq "aaa") {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method match_char_class_range : int ()  {
    # Match char class-range
    {
      my $re = Regex->new("[0-9]+");
      my $target = "z09az";
      
      my $match = $re->match($target);
      
      unless ($match) {
        return 0;
      }
    }

    # Not Match char class-range
    {
      my $re = Regex->new("[0-9a-c]+");
      my $target = "zz";
      
      my $match = $re->match($target);
      
      if ($match) {
        return 0;
      }
    }
    
    # .
    {
      my $re = Regex->new("(.+)");
      my $target = "abc\ndef";
      
      my $match = $re->match($target);
      
      unless ($match) {
        return 0;
      }
      
      unless ($match->captures(1) eq "abc") {
        return 0;
      }
    }
    
    # . - single line mode
    {
      my $re = Regex->new("(.+)", "s");
      my $target = "abc\ndef";
      
      my $match = $re->match($target);
      
      unless ($match) {
        return 0;
      }
      
      unless ($match->captures(1) eq "abc\ndef") {
        return 0;
      }
    }

    return 1;
  }

  static method match_char_class_negate : int () {

    # Match char class-negate
    {
      my $re = Regex->new("[^0-9]+");
      my $target = "zabcz";
      
      my $match = $re->match($target);
      
      unless ($match) {
        return 0;
      }
    }

    # Not match char class-negate
    {
      my $re = Regex->new("[^0-9]+");
      my $target = "012";
      
      my $match = $re->match($target);
      
      if ($match) {
        return 0;
      }
    }

    # Match char class-negate UTF-8
    {
      my $re = Regex->new("[^あ]+");
      my $target = "いうえ";
      
      my $match = $re->match($target);
      
      unless ($match) {
        return 0;
      }
    }

    # Don't Match char class-negate UTF-8
    {
      my $re = Regex->new("[^あ]+");
      my $target = "あああ";
      
      my $match = $re->match($target);
      
      if ($match) {
        return 0;
      }
    }

    return 1;
  }
  
  static method match_char_class : int () {

    # Match char class
    {
      {
        my $re = Regex->new("[bcdあ]+");
        my $target = "zabcあz";
        
        my $match = $re->match($target);
        
        unless ($match) {
          return 0;
        }
      }
      
      {
        my $re = Regex->new("^[a-c\dx-z]+$");
        my $target = "ac09xz";
        my $match = $re->match($target);
        unless ($match) {
          return 0;
        }
      }
    }

    # Match char class-\d
    {
      my $re = Regex->new("[\da]+");
      my $target = "z01az";
      
      my $match = $re->match($target);
      
      unless ($match) {
        return 0;
      }
    }

    # Not Match char class
    {
      my $re = Regex->new("[bcd\d]+");
      my $target = "ae";
      
      my $match = $re->match($target);
      
      if ($match) {
        return 0;
      }
    }

    # ^[\d\D]+
    {
      my $re = Regex->new("^[\d\D]+$");
      
      my $target = "abc123";
      
      my $match = $re->match($target);
      
      unless ($match) {
        return 0;
      }
    }

    # ^[^\d\D]+
    {
      my $re = Regex->new("^[^\d\D]+$");
      
      {
        my $target = "abc";
        
        my $match = $re->match($target);
        if ($match) {
          return 0;
        }
      }
      {
        my $target = "123";
        
        my $match = $re->match($target);
        if ($match) {
          return 0;
        }
      }
    }

    # [a-a] | "-" is a character unless "-" is used as a charcter class range
    {
      my $re = Regex->new("[a-a]");
      
      {
        my $target = "a";
        my $match = $re->match($target);
        unless ($match) {
          return 0;
        }
      }
    }
    
    # [a-aa-a] | "-" is a character unless "-" is used as a charcter class range
    {
      my $re = Regex->new("[a-aa-a]");
      
      {
        my $target = "a";
        my $match = $re->match($target);
        unless ($match) {
          return 0;
        }
      }
    }

    # - | "-" is a character unless "-" is used as a charcter class range
    {
      {
        my $re = Regex->new("-");
        
        {
          my $target = "-";
          my $match = $re->match($target);
          unless ($match) {
            return 0;
          }
        }
      }
      {
        my $re = Regex->new("a-z");
        
        {
          my $target = "a-z";
          my $match = $re->match($target);
          unless ($match) {
            return 0;
          }
        }
      }
      
    }

    # [-] | "-" is a character unless "-" is used as a charcter class range
    {
      my $re = Regex->new("[-]");
      
      {
        my $target = "-";
        my $match = $re->match($target);
        unless ($match) {
          return 0;
        }
      }
    }

    # [a-] | "-" is a character unless "-" is used as a charcter class range
    {
      my $re = Regex->new("[a-]");
      
      {
        my $target = "a";
        my $match = $re->match($target);
        unless ($match) {
          return 0;
        }
      }

      {
        my $target = "-";
        my $match = $re->match($target);
        unless ($match) {
          return 0;
        }
      }
    }

    # Invalid character class range
    {
      eval { Regex->new("[z-a]"); };
      
      unless ($@) {
        return 0;
      }
    }

    # [ ^a]
    {
      my $re = Regex->new("[ ^a]");
      
      {
        my $target = " ";
        my $match = $re->match($target);
        unless ($match) {
          return 0;
        }
      }
      {
        my $target = "^";
        my $match = $re->match($target);
        unless ($match) {
          return 0;
        }
      }
      {
        my $target = "a";
        my $match = $re->match($target);
        unless ($match) {
          return 0;
        }
      }
    }
    
    $@ = undef;
    
    return 1;
  }

  static method match_not_space : int () {

    # Match not space
    {
      my $re = Regex->new("\s+\S+\s+");
      my $target = "\f\tzacz \r\n";
      
      my $match = $re->match($target);
      
      unless ($match) {
        return 0;
      }
    }

    # Not Match not space
    {
      my $re = Regex->new("\S+");
      my $target = "\f\t \r\n";
      
      my $match = $re->match($target);
      
      if ($match) {
        return 0;
      }
    }
    
    return 1;
  }
  static method match_space : int () {

    # Match space
    {
      my $re = Regex->new("a\s+c");
      my $target = "za\f\t\r\n cz";
      
      my $match = $re->match($target);
      
      unless ($match) {
        return 0;
      }
    }

    # Not Match
    {
      my $re = Regex->new("\s+");
      my $target = "\aabc\0";
      
      my $match = $re->match($target);
      
      if ($match) {
        return 0;
      }
    }
    
    return 1;
  }

  static method match_not_word : int () {

    # Match not number
    {
      my $re = Regex->new("\w\W+\w");
      my $target = "0-:9";
      
      my $match = $re->match($target);
      
      unless ($match) {
        return 0;
      }
    }
    
    # Match not a-z
    {
      my $re = Regex->new("\w\W+\w");
      my $target = "ab`{yz";
      
      my $match = $re->match($target);
      
      unless ($match) {
        return 0;
      }
    }

    # Match not A-Z
    {
      my $re = Regex->new("\w\W+\w");
      my $target = "AB`{YZ";
      
      my $match = $re->match($target);
      
      unless ($match) {
        return 0;
      }
    }

    # Match not _
    {
      my $re = Regex->new("\w\W+\w");
      my $target = "_^`_";
      
      my $match = $re->match($target);
      
      unless ($match) {
        return 0;
      }
    }

    # not Match 
    {
      my $re = Regex->new("\W+");
      my $target = "azAZ_09";
      
      my $match = $re->match($target);
      
      if ($match) {
        return 0;
      }
    }
    
    return 1;
  }

  static method match_word : int () {

    # Match number
    {
      my $re = Regex->new("\-\w+\:");
      my $target = "-0123456789:";
      
      my $match = $re->match($target);
      
      unless ($match) {
        return 0;
      }
    }
    
    # Match a-z
    {
      my $re = Regex->new("\`\w+\{");
      my $target = "`abyz{";
      
      my $match = $re->match($target);
      
      unless ($match) {
        return 0;
      }
    }

    # Match A-Z
    {
      my $re = Regex->new("\`\w+\{");
      my $target = "`ABYZ{";
      
      my $match = $re->match($target);
      
      unless ($match) {
        return 0;
      }
    }

    # Match _
    {
      my $re = Regex->new("\^\w+\`");
      my $target = "^__`";
      
      my $match = $re->match($target);
      
      unless ($match) {
        return 0;
      }
    }

    # Match Not
    {
      my $re = Regex->new("\w+");
      my $target = "{}あいう";
      
      my $match = $re->match($target);
      
      if ($match) {
        return 0;
      }
    }
    
    return 1;
  }

  static method match_not_number : int () {

    # Match not number
    {
      my $re = Regex->new("0\D+9");
      my $target = "0abc9";
      
      my $match = $re->match($target);
      
      unless ($match) {
        return 0;
      }
    }
    
    return 1;
  }

  static method match_number : int () {

    # Match number
    {
      my $re = Regex->new("a\d+c");
      my $target = "za0123456789cz";
      
      my $match = $re->match($target);
      
      unless ($match) {
        return 0;
      }
    }
    
    # Match number and not number
    {
      {
        my $re = Regex->new("\d+\D+\d+");
        my $target = "123abc789";
        
        my $match = $re->match($target);
        
        unless ($match) {
          return 0;
        }
      }
    }
    
    return 1;
  }
  
  static method match_end : int () {
    # Match $
    {
      # Match $ - "zabbc"
      {
        my $re = Regex->new("ab+c$");
        my $target = "zabbc";
        
        my $match = $re->match($target);
        
        unless ($match) {
          return 0;
        }
      }

      # Not Match $ - "zabbcz"
      {
        my $re = Regex->new("ab+c$");
        my $target = "zabbcz";
        
        my $match = $re->match($target);
        
        if ($match) {
          return 0;
        }
      }
    }
    
    return 1;
  }

  static method match_start : int () {
    # Match ^
    {
      # Match ^ - "abbcz"
      {
        my $re = Regex->new("^ab+c");
        my $target = "abbcz";
        
        my $match = $re->match($target);
        
        unless ($match) {
          return 0;
        }
      }
      
      # Not Match ^ - "zabbcz"
      {
        my $re = Regex->new("^ab+c");
        my $target = "zabbcz";
        
        my $match = $re->match($target);
        
        if ($match) {
          return 0;
        }
      }
    }
    
    return 1;
  }
  
  static method match_quantifier : int () {
    # Match {1,3}
    {
      # Match {1,3} - "zabcz"
      {
        my $re = Regex->new("ab{1,3}c");
        my $target = "zabcz";
        
        my $match = $re->match($target);
        
        unless ($match) {
          return 0;
        }
      }
      
      # Match {1,3} - "zabbbcz"
      {
        my $re = Regex->new("ab{1,3}c");
        my $target = "zabbbcz";
        
        my $match = $re->match($target);
        
        unless ($match) {
          return 0;
        }
      }

      # Not Match {1,3} - "zacz"
      {
        my $re = Regex->new("ab{1,3}c");
        my $target = "zacz";
        
        my $match = $re->match($target);
        
        if ($match) {
          return 0;
        }
      }
      # Not Match {1,3} - "zabbbbcz"
      {
        my $re = Regex->new("ab{1,3}c");
        my $target = "zabbbbcz";
        
        my $match = $re->match($target);
        
        if ($match) {
          return 0;
        }
      }
    }

    # Match {11,13}
    {
      # Match {11,13} - "zabbbbbbbbbbbcz"
      {
        my $re = Regex->new("ab{11,13}c");
        my $target = "zabbbbbbbbbbbcz";
        
        my $match = $re->match($target);
        
        unless ($match) {
          return 0;
        }
      }
      
      # Match {11,13} - "zabbbcz"
      {
        my $re = Regex->new("ab{11,13}c");
        my $target = "zabbbbbbbbbbbbbcz";
        
        my $match = $re->match($target);
        
        unless ($match) {
          return 0;
        }
      }

      # Not Match {11,13} - "zacz"
      {
        my $re = Regex->new("ab{11,13}c");
        my $target = "zabbbbbbbbbbcz";
        
        my $match = $re->match($target);
        
        if ($match) {
          return 0;
        }
      }
      # Not Match {11,13} - "zabbbbcz"
      {
        my $re = Regex->new("ab{11,13}c");
        my $target = "zabbbbbbbbbbbbbbcz";
        
        my $match = $re->match($target);
        
        if ($match) {
          return 0;
        }
      }
    }

    # {m,}
    {
      my $re = Regex->new("ab{2,}c");
      
      {
        my $target = "zabcz";
        
        my $match = $re->match($target);
        
        if ($match) {
          return 0;
        }
      }
      {
        my $target = "zabbcz";
        
        my $match = $re->match($target);
        
        unless ($match) {
          return 0;
        }
      }
      {
        my $target = "zabbbcz";
        
        my $match = $re->match($target);
        
        unless ($match) {
          return 0;
        }
      }
    }
    
    return 1;
  }

  static method match_one_or_zero : int () {
    # Match ?
    {
      # Match ? - "zabcz"
      {
        my $re = Regex->new("ab?c");
        my $target = "zabcz";
        
        my $match = $re->match($target);
        
        unless ($match) {
          return 0;
        }
      }

      # Not Match ? - "zabbcz"
      {
        my $re = Regex->new("ab?c");
        my $target = "zabbcz";
        
        my $match = $re->match($target);
        
        if ($match) {
          return 0;
        }
      }

      # Match ? - "zacz"
      {
        my $re = Regex->new("ab?c");
        my $target = "zacz";
        
        my $match = $re->match($target);
        
        unless ($match) {
          return 0;
        }
      }
    }
    
    return 1;
  }
  
  static method match_one_more : int () {
    # Match +
    {
      # Match + - "zabcz"
      {
        my $re = Regex->new("ab+c");
        my $target = "zabcz";
        
        my $match = $re->match($target);
        
        unless ($match) {
          return 0;
        }
      }

      # Match + - "zabbcz"
      {
        my $re = Regex->new("ab+c");
        my $target = "zabbcz";
        
        my $match = $re->match($target);
        
        unless ($match) {
          return 0;
        }
      }

      # Not Match + - "zacz"
      {
        my $re = Regex->new("ab+c");
        my $target = "zacz";
        
        my $match = $re->match($target);
        
        if ($match) {
          return 0;
        }
      }
    }
    
    return 1;
  }

  static method match_zero_more : int () {
    # Match *
    {
      # Match * - "zabcz"
      {
        my $re = Regex->new("ab*c");
        my $target = "zabcz";
        
        my $match = $re->match($target);
        
        unless ($match) {
          return 0;
        }
      }

      # Match * - "zabbcz"
      {
        my $re = Regex->new("ab*c");
        my $target = "zabbcz";
        
        my $match = $re->match($target);
        
        unless ($match) {
          return 0;
        }
      }

      # Match * - "zacz"
      {
        my $re = Regex->new("ab*c");
        my $target = "zacz";
        
        my $match = $re->match($target);
        
        unless ($match) {
          return 0;
        }
      }

      # Not Match * - "zabbdz"
      {
        my $re = Regex->new("ab*c");
        my $target = "zabbdz";
        
        my $match = $re->match($target);
        
        if ($match) {
          return 0;
        }
      }
    }
    
    return 1;
  }

  static method match_forward : int () {

    # Not Match string
    {
      my $re = Regex->new("abc");
      my $target = "zabcz";
      
      my $match = (my $offset = 2, $re->match_forward($target, \$offset));
      
      if ($match) {
        return 0;
      }
    }
    
    # Match string
    {
      my $re = Regex->new("abc");
      my $target = "zabcz";
      
      my $match = (my $offset = 1, $re->match_forward($target, \$offset));
      
      unless ($match) {
        return 0;
      }
    }

    return 1;
  }

  static method match : int () {

    # Match string
    {
      my $re = Regex->new("abc");
      my $target = "zabcz";
      
      my $match = $re->match($target);
      
      unless ($match) {
        return 0;
      }
    }
    
    # Match same string
    {
      my $re = Regex->new("abc");
      my $target = "abc";
      
      my $match = $re->match($target);
      
      unless ($match) {
        return 0;
      }
    }

    # ignore case
    {
      {
        my $re = Regex->new("abz", "i");
        my $target = "zABZz";
        
        my $match = $re->match($target);
        
        unless ($match) {
          return 0;
        }
      }

      {
        my $re = Regex->new("ABZ", "i");
        my $target = "zabzz";
        
        my $match = $re->match($target);
        
        unless ($match) {
          return 0;
        }
      }
      
      {
        my $re = Regex->new("A[B-Z]{2,2}", "i");
        my $target = "zabzz";
        
        my $match = $re->match($target);
        
        unless ($match) {
          return 0;
        }
      }

      {
        my $re = Regex->new("a[b-z]{2,2}", "i");
        my $target = "zABZz";
        
        my $match = $re->match($target);
        
        unless ($match) {
          return 0;
        }
      }
    }

    return 1;
  }
  
  static method extra : int () {

    {
      my $path = "/..";
      my $match = Regex->new("^/\.\.$")->match($path);
      unless ($match) {
        return 0;
      }
    }

    {
      my $path = "/..";
      $path = Regex->new("^/\.\.$")->replace($path, "/");
      unless ($path eq "/") {
        return 0;
      }
    }
    
    {
      my $path = "/..";
      my $match = Regex->new("^/\.\.$")->match($path);
      unless ($match) {
        return 0;
      }
    }
    
    # Capture syntax suger
    {
      my $re = Regex->new("(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)");
      
      my $target = "12345678910";
      my $match = $re->match($target);
      
      unless ($match) {
        return 0;
      }
      
      unless ($match->cap1 eq "1") {
        return 0;
      }
      unless ($match->cap2 eq "2") {
        return 0;
      }
      unless ($match->cap3 eq "3") {
        return 0;
      }
      unless ($match->cap4 eq "4") {
        return 0;
      }
      unless ($match->cap5 eq "5") {
        return 0;
      }
      unless ($match->cap6 eq "6") {
        return 0;
      }
      unless ($match->cap7 eq "7") {
        return 0;
      }
      unless ($match->cap8 eq "8") {
        return 0;
      }
      unless ($match->cap9 eq "9") {
        return 0;
      }
      unless ($match->cap10 eq "10") {
        return 0;
      }
    }
    
    # "]" is a character at the place that is not character class.
    {
      my $re = Regex->new("]");
      my $target = "]";
      my $match = $re->match($target);
      unless ($match) {
        return 0;
      }
    }
    
    # Simple
    {
      my $re = Regex->new("c");
      
      my $string = "abc";
      my $match = $re->match($string);
      
      unless ($match) {
        return 0;
      }
    }
    
    # Captures
    {
      my $re = Regex->new("^(\d+):(\d+):(\d+)$");
      
      my $string = "12:34:56";
      my $match = $re->match($string);
      
      unless ($match) {
        return 0;
      }
      
      unless ($match->cap1 eq "12") {
        return 0;
      }
      
      unless ($match->cap2 eq "34") {
        return 0;
      }
      
      unless ($match->cap3 eq "56") {
        return 0;
      }
    }

    # Ignore case
    {
      my $re = Regex->new("abc", "i");
      
      my $string = "ABC";
      my $match = $re->match($string);
      
      unless ($match) {
        return 0;
      }
    }

    {
      my $re = Regex->new("bc");
      
      my $string = "abcdbc";
      my $offset = 0;
      {
        my $match = $re->match_forward($string, \$offset);
        
        unless ($match) {
          return 0;
        }
        
        unless ($offset == 3) {
          return 0;
        }
      }

      {
        my $match = $re->match_forward($string, \$offset);
        
        unless ($match) {
          return 0;
        }
        
        unless ($offset == 6) {
          return 0;
        }
      }

      {
        my $match = $re->match_forward($string, \$offset);
        
        if ($match) {
          return 0;
        }
      }
    }
    
    {
      my $re = Regex->new("bc");
      
      my $string = "abcdbc";
      my $offset = 0;
      
      my $match_count = 0;
      while ($re->match_forward($string, \$offset)) {
        $match_count++;
      }
      
      unless ($match_count == 2) {
        return 0;
      }
      unless ($offset == 6) {
        return 0;
      }
    }

    {
      my $re = Regex->new("bc");
      
      my $string = "abcdbc";
      my $offset = 0;
      
      my $replaced = $re->replace($string, "BC");
      
      unless ($replaced eq "aBCdbc") {
        return 0;
      }
    }

    # '\b'
    {
      {
        my $re = Regex->new("\b");

        my $string = "12 34 56";
        my $match = $re->match($string);

        unless ($match) {
          return 0;
        }
      }

      {
        my $re = Regex->new("\b");
        my $string = "ab cde";

        my $replaced = $re->replace($string, "_");

        unless ($replaced eq "_ab cde") {
          return 0;
        }
      }

      {
        my $re = Regex->new("\b");
        my $string = "  k";

        my $replaced = $re->replace($string, "_");

        unless ($replaced eq "  _k") {
          return 0;
        }
      }

    }
    
    return 1;
  }

  static method extra_url_escape : string ($input : string) {
    
    # URL escape
    my $regex = Regex->new("([^A-Za-z0-9\-\._~])");
    my $output = $regex->replace_g($input, method : string ($re : Regex, $match : Regex::Match) {
      my $bytes = $match->cap1;
      
      my $escaped_char_buffer = StringBuffer->new;
      
      for (my $i = 0; $i < length $bytes; $i++) {
        my $byte = $bytes->[$i];
        my $hex_string = Format->sprintf("%%%02X", [(object)($byte & 0xFF)]);
        $escaped_char_buffer->push($hex_string);
      }
      
      my $escaped_char = $escaped_char_buffer->to_string;
      
      return $escaped_char;
    });
    
    return $output;
  }
  
  static method extra_url_unescape : string ($input : string) {
    
    # URL unescape
    my $regex = Regex->new("%([0-9a-fA-F]{2,2})");
    my $output = $regex->replace_g($input, method : string ($re : Regex, $match : Regex::Match) {
      my $cap1 = $match->cap1;
      my $hex = Fn->hex($cap1);
      my $ch = (string)[(byte)$hex];
      return $ch;
    });
    
    return $output;
  }

  static method split : int () {
    {
      my $string = "foo  bar   baz";
      my $splited_strings = Regex->new("\s+")->split($string);
      unless (Array->equals_string($splited_strings, ["foo", "bar", "baz"])) {
        return 0;
      }
    }
    
    {
      my $string = "foo\\bar/baz";
      my $splited_strings = Regex->new("[/\\\\]")->split($string);
      unless (Array->equals_string($splited_strings, ["foo", "bar", "baz"])) {
        return 0;
      }
    }

    {
      my $string = "foo,bar,baz";
      my $splited_strings = Regex->new(",")->split($string);
      unless (Array->equals_string($splited_strings, ["foo", "bar", "baz"])) {
        return 0;
      }
    }
    
    {
      my $string = "foo,bar,";
      my $splited_strings = Regex->new(",")->split($string);
      unless (Array->equals_string($splited_strings, ["foo", "bar"])) {
        return 0;
      }
    }
    
    {
      my $string = ",foo,,bar,,";
      my $splited_strings = Regex->new(",")->split($string);
      unless (Array->equals_string($splited_strings, ["", "foo", "", "bar"])) {
        return 0;
      }
    }
    
    {
      my $string = "foo : bar : baz";
      my $splited_strings = Regex->new(" : ",)->split($string);
      unless (Array->equals_string($splited_strings, ["foo", "bar", "baz"])) {
        return 0;
      }
    }
    {
      my $string = "foo : bar : ";
      my $splited_strings = Regex->new(" : ",)->split($string);
      unless (Array->equals_string($splited_strings, ["foo", "bar"])) {
        return 0;
      }
    }
    {
      my $string = " : foo :  : bar :  : ";
      my $splited_strings = Regex->new(" : ",)->split($string);
      unless (Array->equals_string($splited_strings, ["", "foo", "", "bar"])) {
        return 0;
      }
    }
    {
      my $string = "foo---bar---baz";
      my $splited_strings = Regex->new("---",)->split($string);
      unless (Array->equals_string($splited_strings, ["foo", "bar", "baz"])) {
        return 0;
      }
    }
    {
      my $string = "foo---bar---";
      my $splited_strings = Regex->new("---",)->split($string);
      unless (Array->equals_string($splited_strings, ["foo", "bar"])) {
        return 0;
      }
    }
    {
      my $string = "---foo------bar------";
      my $splited_strings = Regex->new("---",)->split($string);
      unless (Array->equals_string($splited_strings, ["", "foo", "", "bar"])) {
        return 0;
      }
    }
    
    {
      my $string = "foo--!bar---baz";
      my $splited_strings = Regex->new("---",)->split($string);
      unless (Array->equals_string($splited_strings, ["foo--!bar", "baz"])) {
        return 0;
      }
    }

    {
      my $string = "foo,bar,baz";
      my $splited_strings = Regex->new(",")->split($string, -1);
      unless (Array->equals_string($splited_strings, ["foo", "bar", "baz"])) {
        return 0;
      }
    }
    {
      my $string = "foo,bar,baz";
      my $splited_strings = Regex->new(",")->split($string);
      unless (Array->equals_string($splited_strings, ["foo", "bar", "baz"])) {
        return 0;
      }
    }
    
    {
      my $string = "foo,bar,";
      my $splited_strings = Regex->new(",")->split($string, -1);
      unless (Array->equals_string($splited_strings, ["foo", "bar", ""])) {
        return 0;
      }
    }
    
    {
      my $string = ",foo,,bar,,";
      my $splited_strings = Regex->new(",")->split($string, -1);
      unless (Array->equals_string($splited_strings, ["", "foo", "", "bar", "", ""])) {
        return 0;
      }
    }
    
    {
      my $string = "foo : bar : baz";
      my $splited_strings = Regex->new(" : ",)->split($string, -1);
      unless (Array->equals_string($splited_strings, ["foo", "bar", "baz"])) {
        return 0;
      }
    }
    {
      my $string = "foo : bar : ";
      my $splited_strings = Regex->new(" : ",)->split($string, -1);
      unless (Array->equals_string($splited_strings, ["foo", "bar", ""])) {
        return 0;
      }
    }
    {
      my $string = " : foo :  : bar :  : ";
      my $splited_strings = Regex->new(" : ",)->split($string, -1);
      unless (Array->equals_string($splited_strings, ["", "foo", "", "bar", "", ""])) {
        return 0;
      }
    }
    
    {
      my $string = "foo---bar---baz";
      my $splited_strings = Regex->new("---",)->split($string, -1);
      unless (Array->equals_string($splited_strings, ["foo", "bar", "baz"])) {
        return 0;
      }
    }
    {
      my $string = "foo---bar---";
      my $splited_strings = Regex->new("---",)->split($string, -1);
      unless (Array->equals_string($splited_strings, ["foo", "bar", ""])) {
        return 0;
      }
    }
    {
      my $string = "---foo------bar------";
      my $splited_strings = Regex->new("---",)->split($string, -1);
      unless (Array->equals_string($splited_strings, ["", "foo", "", "bar", "", ""])) {
        return 0;
      }
    }
    
    {
      my $string = "foo--!bar---baz";
      my $splited_strings = Regex->new("---",)->split($string, -1);
      unless (Array->equals_string($splited_strings, ["foo--!bar", "baz"])) {
        return 0;
      }
    }
    
    {
      my $string = "foo,bar,baz";
      my $splited_strings = Regex->new(",")->split($string, 1);
      unless (Array->equals_string($splited_strings, ["foo,bar,baz"])) {
        return 0;
      }
    }
    
    {
      my $string = "foo,bar,baz";
      my $splited_strings = Regex->new(",")->split($string, 2);
      unless (Array->equals_string($splited_strings, ["foo", "bar,baz"])) {
        return 0;
      }
    }
    
    {
      my $string = "foo,bar,baz";
      my $splited_strings = Regex->new(",")->split($string, 3);
      unless (Array->equals_string($splited_strings, ["foo", "bar", "baz"])) {
        return 0;
      }
    }
    
    {
      my $string = "foo,bar,baz";
      my $splited_strings = Regex->new(",")->split($string, 4);
      unless (Array->equals_string($splited_strings, ["foo", "bar", "baz"])) {
        return 0;
      }
    }

    # Exceptions
    {
      {
        my $sep = ",";
        my $string = (string)undef;
        my $limit = -1;
        eval {
          Regex->new($sep)->split($string, $limit);
        };
        unless (Fn->contains($@, "The \$string must be defined")) {
          return 0;
        }
      }
      
      $@ = undef;
    }

    return 1;
  }
}
