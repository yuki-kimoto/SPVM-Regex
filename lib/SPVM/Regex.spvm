# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Regex {
  version "0.245";
  
  use Resource::RE2;
  
  use Fn;
  use Regex::Replacer;
  use Regex::Re2;
  use Regex::Match;
  use Regex::ReplaceInfo;
  use Hash;
  use List;
  
  has re2 : Regex::Re2;
  has captures : ro string[];
  has match_start : ro int;
  has match_length : ro int;
  has replaced_count : ro int;
  
  static method new : Regex ($pattern : string, $flags : string = undef) {
    
    my $self = new Regex;
    
    my $re2_pattern = $pattern;
    
    if ($flags) {
      $re2_pattern = "(?$flags)$re2_pattern";
    }
    
    $self->compile($re2_pattern);
    
    return $self;
  }
  
  native method DESTROY : void ();
  
  private native method compile : void ($pattern : string);
  
  method match_v2 : Regex::Match ($string_or_buffer : object of string|StringBuffer, $offset_ref : int* = undef, $length : int = -1) {
    
    my $string = (string)undef;
    if ($string_or_buffer isa string) {
      $string = (string)$string_or_buffer;
    }
    elsif ($string_or_buffer isa StringBuffer) {
      
      my $string_buffer = (StringBuffer)$string_or_buffer;
      
      my $offset = 0;
      if ($offset_ref) {
        $offset = $$offset_ref;
      }
      
      if ($length < 0) {
        $length = $string_buffer->length - $offset;
      }
      
      unless ($offset + $length <= $string_buffer->length) {
        die "The \$offset + \$length must be less than or equalt to the lenght of the \$string_buffer.";
      }
      
      $string = $string_buffer->get_string_unsafe;
    }
    else {
      die "The type of \$string_ref_or_buffer must be string or StringBuffer.";
    }
    
    my $regex_match = $self->match_forward($string, $offset_ref, $length);
    
    return $regex_match;
  }
  
  method match : Regex::Match ($string : string, $offset : int = 0, $length : int = -1) {
    my $regex_match = $self->match_forward($string, \$offset, $length);
    return $regex_match;
  }
  
  native method match_forward : Regex::Match ($string : string, $offset_ref : int*, $length : int = -1);
  
  method buffer_match : Regex::Match ($string_buffer : StringBuffer, $offset : int = 0, $length : int = -1) {
    if ($length < 0) {
      $length = $string_buffer->length - $offset;
    }
    
    unless ($offset + $length <= $string_buffer->length) {
      die "The \$offset + \$length must be less than or equalt to the lenght of the \$string_buffer.";
    }
    
    my $regex_match = $self->match($string_buffer->get_string_unsafe, $offset, $length);
    
    return $regex_match;
  }
  
  method buffer_match_forward : Regex::Match ($string_buffer : StringBuffer, $offset_ref : int*, $length : int = -1) {
    if ($length < 0) {
      $length = $string_buffer->length - $$offset_ref;
    }
    
    unless ($$offset_ref + $length <= $string_buffer->length) {
      die "The \$\$offset_ref + \$length must be less than or equalt to the lenght of the \$string_buffer.";
    }
    
    my $regex_match = $self->match_forward($string_buffer->get_string_unsafe, $offset_ref, $length);
    
    return $regex_match;
  }
  
  method cap1 : string () { return $self->captures->[1]; }
  method cap2 : string () { return $self->captures->[2]; }
  method cap3 : string () { return $self->captures->[3]; }
  method cap4 : string () { return $self->captures->[4]; }
  method cap5 : string () { return $self->captures->[5]; }
  method cap6 : string () { return $self->captures->[6]; }
  method cap7 : string () { return $self->captures->[7]; }
  method cap8 : string () { return $self->captures->[8]; }
  method cap9 : string () { return $self->captures->[9]; }
  method cap10 : string () { return $self->captures->[10]; }
  method cap11 : string () { return $self->captures->[11]; }
  method cap12 : string () { return $self->captures->[12]; }
  method cap13 : string () { return $self->captures->[13]; }
  method cap14 : string () { return $self->captures->[14]; }
  method cap15 : string () { return $self->captures->[15]; }
  method cap16 : string () { return $self->captures->[16]; }
  method cap17 : string () { return $self->captures->[17]; }
  method cap18 : string () { return $self->captures->[18]; }
  method cap19 : string () { return $self->captures->[19]; }
  method cap20 : string () { return $self->captures->[20]; }
  
  method replace_v2 : Regex::ReplaceInfo ($string_ref_or_buffer : object of string[]|StringBuffer, $replace : object of string|Regex::Replacer, $offset_ref : int* = undef, $length : int = -1, $options : object[] = undef) {
    
    my $replace_info_ref = new Regex::ReplaceInfo[1];
    
    my $string_ref = (string)undef;
    if ($string_ref_or_buffer isa string[]) {
      
      my $string_ref = (string[])$string_ref_or_buffer;
      
      unless (@$string_ref == 1) {
        die "\$string_ref_or_buffer must be 1-length array if the type is string[].";
      }
      
      my $string = $string_ref->[0];
      
      $options = Fn->merge_options($options, {info => $replace_info_ref});
      
      my $replaced_string = $self->replace_common($string, $replace, $offset_ref, $length, $options);
      
      $string_ref->[0] = $replaced_string;
    }
    elsif ($string_ref_or_buffer isa StringBuffer) {
      
      my $string_buffer = (StringBuffer)$string_ref_or_buffer;
      
      my $offset = 0;
      if ($offset_ref) {
        $offset = $$offset_ref;
      }
      
      if ($length < 0) {
        $length = $string_buffer->length - $offset;
      }
      
      unless ($offset + $length <= $string_buffer->length) {
        die "The \$offset + \$length must be less than or equalt to the lenght of the \$string_buffer.";
      }
      
      $options = Fn->merge_options($options, {info => $replace_info_ref});
      
      $self->buffer_replace_common($string_buffer, $replace, $offset_ref, $length, $options);
    }
    else {
      die "The type of \$string_ref_or_buffer must be string[] or StringBuffer.";
    }
    
    my $replace_info = $replace_info_ref->[0];
    
    if ($replace_info->replaced_count > 0) {
      return $replace_info;
    }
    else {
      return undef;
    }
  }
  
  method replace_v2_g  : Regex::ReplaceInfo ($string_ref_or_buffer : object of string[]|StringBuffer, $replace : object of string|Regex::Replacer, $offset_ref : int* = undef, $length : int = -1, $options : object[] = undef) {
    unless ($options) {
      $options = {};
    }
    $options = Fn->merge_options($options, {global => 1});
    
    return $self->replace_v2($string_ref_or_buffer, $replace, $offset_ref, $length, $options);
  }
  
  method replace  : string ($string : string, $replace : object of string|Regex::Replacer, $offset : int = 0, $length : int = -1, $options : object[] = undef) {
    return $self->replace_common($string, $replace, \$offset, $length, $options);
  }
  
  method replace_g  : string ($string : string, $replace : object of string|Regex::Replacer, $offset : int = 0, $length : int = -1, $options : object[] = undef) {
    unless ($options) {
      $options = {};
    }
    $options = Fn->merge_options({global => 1}, $options);
    
    return $self->replace_common($string, $replace, \$offset, $length, $options);
  }
  
  method replace_common : string ($string : string, $replace : object of string|Regex::Replacer, $offset_ref : int*, $length : int = -1, $options : object[] = undef) {
    my $string_buffer = StringBuffer->new;
    $string_buffer->push($string);
    
    $self->buffer_replace_common($string_buffer, $replace, $offset_ref, $length, $options);
    
    my $result_string = $string_buffer->to_string;
    
    return $result_string;
  }
  
  method buffer_replace  : void ($string_buffer : StringBuffer, $replace : object of string|Regex::Replacer, $offset : int = 0, $length : int = -1, $options : object[] = undef) {
    $self->buffer_replace_common($string_buffer, $replace, \$offset, $length, $options);
  }
  
  method buffer_replace_g  : string ($string_buffer : StringBuffer, $replace : object of string|Regex::Replacer, $offset : int = 0, $length : int = -1, $options : object[] = undef) {
    unless ($options) {
      $options = {};
    }
    $options = Fn->merge_options({global => 1}, $options);
    
    $self->buffer_replace_common($string_buffer, $replace, \$offset, $length, $options);
  }
  
  precompile method buffer_replace_common : void ($string_buffer : StringBuffer, $replace : object of string|Regex::Replacer, $offset_ref : int*, $length : int = -1, $options : object[] = undef) {
    
    my $optiton_h = Hash->new($options);
    
    my $offset = 0;
    if ($offset_ref) {
      $offset = $$offset_ref;
    }
    
    my $original_offset = $offset;
    
    my $global = 0;
    if (my $global_obj = $optiton_h->get("global")) {
      $global = (int)$global_obj;
    }
    
    unless ($string_buffer) {
      die "The \$string must be defined";
    }
    
    unless ($offset >= 0) {
      die "The \$offset must be greater than or equal to 0";
    }
    
    my $string_length = $string_buffer->length;
    
    if ($length == -1) {
      $length = $string_length - $offset;
    }
    
    unless ($offset + $length <= $string_length) {
      die "The \$offset + the \$length must be less than or equal to the length of the \$string";
    }
    
    my $regex_match = (Regex::Match)undef;
    my $match_count = 0;
    while (1) {
      $regex_match = $self->buffer_match_forward($string_buffer, \$offset, $length);
      
      if ($regex_match) {
        $match_count++;
      }
      else {
        last;
      }
      
      my $replace_string : string;
      if ($replace isa string) {
        $replace_string = (string)$replace;
      }
      elsif ($replace isa Regex::Replacer) {
        my $replacer = (Regex::Replacer)$replace;
        $replace_string = $replacer->($self, $regex_match);
      }
      else {
        die "The \$replace must be a string or a Regex::Replacer object";
      }
      
      my $replace_string_length = length $replace_string;
      
      my $match_start = $regex_match->match_start;
      my $match_length = $regex_match->match_length;
      
      $string_buffer->replace($match_start, $match_length, $replace_string);
      
      $self->{replaced_count} = $match_count;
      
      unless ($global) {
        last;
      }
      
      my $next_offset = $match_start + $replace_string_length;
      $offset = $next_offset;
      $length = $string_buffer->length - $offset;
    }
    
    my $regex_replace_info = Regex::ReplaceInfo->new({replaced_count => $match_count, match => $regex_match});
    
    my $option_regex_replace_info = (Regex::ReplaceInfo[])$optiton_h->get("info");
    
    if ($option_regex_replace_info) {
      $option_regex_replace_info->[0] = $regex_replace_info;
    }
    
    if ($offset_ref) {
      $$offset_ref = $offset;
    }
  }
  
  precompile method split : string[] ($string : string, $limit : int = 0) {
    unless ($string) {
      die "The \$string must be defined";
    }
    
    my $string_length = length $string;
    
    my $parts_list = StringList->new_len(0);
    
    my $offset = 0;
    my $match_count = 0;
    for (my $i = 0; $i < $string_length; $i++) {
      if ($limit > 0 && $match_count >= $limit - 1) {
        last;
      }
      
      my $current_offset = $offset;
      my $regex_match = $self->match_forward($string, \$offset);
      if ($regex_match) {
        $match_count++;

        my $match_start = $regex_match->match_start;
        my $match_length = $regex_match->match_length;
        
        my $part = Fn->substr($string, $current_offset, $match_start - $current_offset);
        $parts_list->push($part);
        my $match_legnth = $self->match_length;
        $offset = $match_start + $match_legnth;
      }
    }
    if ($offset == $string_length) {
      $parts_list->push("");
    }
    else {
      my $part = Fn->substr($string, $offset, $string_length - $offset);
      $parts_list->push($part);
    }

    if ($limit == 0) {
      while ($parts_list->length > 0) {
        if ($parts_list->get($parts_list->length - 1) eq "") {
          $parts_list->pop;
        }
        else {
          last;
        }
      }
    }
    
    my $parts = $parts_list->to_array;
    
    return $parts;
  }
}

